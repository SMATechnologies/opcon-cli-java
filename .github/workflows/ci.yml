# Workflow triggering
on:
  push:
    branches:
      - master
    tags:
      - 'v*'

name: CI

jobs:
  build:
    runs-on: ubuntu-latest
    name: CI on Java 11
    
    steps:
      # Checkout the code
      - name: Code checkout
        uses: actions/checkout@master
      
      # Prepare the environment with Java 11
      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: 11
          
      # Build the maven project, output into ./opcon-cli-dist/
      - name: Build
        run: mvn clean package
      
      # Download the latest GA OpenJDK JRE 11 from AdoptOpenJDK for Windows x64
      - name: Get Java 11 JRE for Windows x64
        run: curl -L "https://api.adoptopenjdk.net/v3/binary/latest/11/ga/windows/x64/jre/hotspot/normal/adoptopenjdk" --output java.zip
        
      # Extract Windows JRE
      - name: Extract JRE into Java
        run: 7z x java.zip -o./opcon-cli-dist/
      
      # Prepare the Windows distribution folder for Zip
      - name: Create Windows Folder
        run: |
          mkdir OpConCLI_Windows
          mv opcon-cli-dist/jdk-* OpConCLI_Windows/java
          cp opcon-cli-dist/opconcli.exe OpConCLI_Windows/
          cp opcon-cli-dist/EncryptValue.exe OpConCLI_Windows/
          cp opcon-cli-dist/Connector.config OpConCLI_Windows/

      # Zip the folder that contains all binaries and configuration to run on Windows (including Java)    
      - name: Zip Windows Folder
        uses: montudor/action-zip@v0.1.0
        with:
          args: zip -qq -r ./OpConCLI_Windows.zip ./OpConCLI_Windows

      # Upload the OpConCLI_Windows.zip file as artifact
      - uses: actions/upload-artifact@v1
        with:
          name: OpConCLI_Windows.zip
          path: ./OpConCLI_Windows.zip
      
      # Download the latest GA OpenJDK JRE 11 from AdoptOpenJDK for Linux x64
      - name: Get Java 11 JRE for Windows x64
        run: curl -L "https://api.adoptopenjdk.net/v3/binary/latest/11/ga/linux/x64/jre/hotspot/normal/adoptopenjdk" --output java.zip

      # Extract Linux JRE
      - name: Extract JRE into Java
        run: 7z x java.zip -o./opcon-cli-dist/
      
      # Prepare the Linux distribution folder for Zip
      - name: Create Windows Folder
        run: |
          mkdir OpConCLI_Linux
          mv opcon-cli-dist/jdk-* OpConCLI_Linux/java
          cp opcon-cli-dist/opconcli OpConCLI_Linux/
          cp opcon-cli-dist/EncryptValue OpConCLI_Linux/
          cp opcon-cli-dist/Connector.config OpConCLI_Linux/
      
      # Zip the folder that contains all binaries and configuration to run on Linux (including Java)    
      - name: Zip Windows Folder
        uses: montudor/action-zip@v0.1.0
        with:
          args: zip -qq -r ./OpConCLI_Linux.zip ./OpConCLI_Linux

      # Upload the OpConCLI_Linux.zip file as artifact
      - uses: actions/upload-artifact@v1
        with:
          name: OpConCLI_Linux.zip
          path: ./OpConCLI_Linux.zip
          
     # Release - only ran when pushing new Tag starting with 'v'
     # Create a new release out of the Tag being pushed
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false
      
      # Release - only ran when pushing new Tag starting with 'v'
      # Upload the Windows Zip distribution to the newly created Release
      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/v')
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: OpConCLI_Windows.zip
          asset_name: OpConCLI_Windows.zip
          asset_content_type: application/zip

      # Release - only ran when pushing new Tag starting with 'v'
      # Upload the Linux Zip distribution to the newly created Release
      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/v')
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: OpConCLI_Linux.zip
          asset_name: OpConCLI_Linux.zip
          asset_content_type: application/zip